<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Demo</title>
      <link href="2021/04/04/firstdemo/"/>
      <url>2021/04/04/firstdemo/</url>
      
        <content type="html"><![CDATA[<h1 id="ItemCF"><a href="#ItemCF" class="headerlink" title="ItemCF"></a>ItemCF</h1><p>个性化推荐（基于物品的协同过滤算法）<br><a href="https://github.com/xuzichang/UserCF/blob/master/rec%20demo.mp4">个性化推荐_视频Demo</a></p><h2 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h2><blockquote><ol><li>计算物品之间的相似度</li><li>根据物品的相似度和用户的历史行为给用户生成推荐列表</li></ol></blockquote><h2 id="二、算法实现和应用"><a href="#二、算法实现和应用" class="headerlink" title="二、算法实现和应用"></a>二、算法实现和应用</h2><h3 id="1、计算物品之间的相似度-余弦相似度"><a href="#1、计算物品之间的相似度-余弦相似度" class="headerlink" title="1、计算物品之间的相似度[余弦相似度]"></a>1、计算物品之间的相似度[余弦相似度]</h3><p>设 N(u) 表示喜欢物品u的用户数，| N(u) ⋂ N(u) |表示同时喜欢物品u物品v的用户数，那么物品 u 和 v 的相似度为</p><div align="center"><img src="https://github.com/xuzichang/UserCF/blob/master/ImgForReadme/CodeCogsEqn.png" text-align="center"></div><p>以Demo为例，为用户1001推荐商品。</p><div align="center"><img src="https://github.com/xuzichang/UserCF/blob/master/ImgForReadme/table.png" text-align="center" height="300px"></div><h4 id="1-1、建立用户-物品倒排表"><a href="#1-1、建立用户-物品倒排表" class="headerlink" title="1.1、建立用户-物品倒排表"></a>1.1、建立用户-物品倒排表</h4><div align="center"><img src="https://github.com/xuzichang/UserCF/blob/master/ImgForReadme/user-item.png" text-align="center" height="100px"></div><h4 id="1-2、计算共现矩阵，N-i-表示除去当前用户喜欢物品i的人数"><a href="#1-2、计算共现矩阵，N-i-表示除去当前用户喜欢物品i的人数" class="headerlink" title="1.2、计算共现矩阵，N[i]表示除去当前用户喜欢物品i的人数"></a>1.2、计算共现矩阵，N[i]表示除去当前用户喜欢物品i的人数</h4><div align="center"><img src="https://github.com/xuzichang/UserCF/blob/master/ImgForReadme/gongxianjuzhen.png" text-align="center" height="200px"></div><div align="center"><img src="https://github.com/xuzichang/UserCF/blob/master/ImgForReadme/usercount.png" text-align="center" height="50px"></div><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//初始矩阵</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> likeLists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> pid1 <span class="token operator">=</span> likeLists<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span><span class="token class-name">N</span><span class="token punctuation">[</span>pid1<span class="token punctuation">]</span><span class="token punctuation">;</span>                                          <span class="token comment">//喜欢该id物品的人数加一</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> likeLists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pid2 <span class="token operator">=</span> likeLists<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>curMatrix<span class="token punctuation">[</span>pid1<span class="token punctuation">]</span><span class="token punctuation">[</span>pid2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">++</span>curMatrix<span class="token punctuation">[</span>pid2<span class="token punctuation">]</span><span class="token punctuation">[</span>pid1<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token comment">//对称加一</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//累加所有矩阵, 得到共现矩阵</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> products<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> products<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pid1 <span class="token operator">=</span> products<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pid2 <span class="token operator">=</span> products<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comMatrix<span class="token punctuation">[</span>pid1<span class="token punctuation">]</span><span class="token punctuation">[</span>pid2<span class="token punctuation">]</span> <span class="token operator">+=</span> curMatrix<span class="token punctuation">[</span>pid1<span class="token punctuation">]</span><span class="token punctuation">[</span>pid2<span class="token punctuation">]</span><span class="token punctuation">;</span>        comMatrix<span class="token punctuation">[</span>pid1<span class="token punctuation">]</span><span class="token punctuation">[</span>pid2<span class="token punctuation">]</span> <span class="token operator">+=</span> curMatrix<span class="token punctuation">[</span>pid1<span class="token punctuation">]</span><span class="token punctuation">[</span>pid2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3、计算余弦相似度矩阵W"><a href="#1-3、计算余弦相似度矩阵W" class="headerlink" title="1.3、计算余弦相似度矩阵W"></a>1.3、计算余弦相似度矩阵W</h4><p>当前用户1001点赞的物品ID为1，由共现矩阵可得Nij。（跳过当前用户1001喜欢得物品1）</p><div align="center"><img src="https://github.com/xuzichang/UserCF/blob/master/ImgForReadme/Nij.png" text-align="center" height="50px"></div><p>根据余弦相似度公式，得Wij。</p><div align="center"><img src="https://github.com/xuzichang/UserCF/blob/master/ImgForReadme/Wij.png" text-align="center" height="50px"></div><p>这里使用了TreeSet重写compare方法实现添加的商品按点赞数排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> preList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//重写compare方法  按相似度Wij排序；当相似度Wij相同时，按点赞数排序</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Product</span> o1<span class="token punctuation">,</span> <span class="token class-name">Product</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>o2<span class="token punctuation">.</span><span class="token function">getW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回值为0，表示同一元素</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">//当相似度相同时，比较点赞数</span>            <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//预处理的列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Like</span> like<span class="token operator">:</span> likeLists<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token class-name">Nij</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                         <span class="token comment">//既喜欢i又喜欢j的人数</span>    <span class="token keyword">double</span> <span class="token class-name">Wij</span><span class="token punctuation">;</span>                          <span class="token comment">//相似度</span>    <span class="token class-name">Product</span> tmp<span class="token punctuation">;</span>                           <span class="token comment">//当前的产品</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> like<span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token operator">:</span> products<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>like<span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> product<span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> product<span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Nij</span> <span class="token operator">=</span> comMatrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Wij</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token class-name">Nij</span><span class="token operator">/</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token class-name">N</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//计算余弦相似度</span>        tmp <span class="token operator">=</span> productdao<span class="token punctuation">.</span><span class="token function">findProductById</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token class-name">Wij</span><span class="token punctuation">)</span><span class="token punctuation">)</span> tmp<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> tmp<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token class-name">Wij</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>tmp<span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>               <span class="token comment">//已加入推荐列表</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token class-name">Wij</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Wij</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            preList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>tmp<span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、根据物品的相似度和用户的历史行为给用户生成推荐列表"><a href="#2、根据物品的相似度和用户的历史行为给用户生成推荐列表" class="headerlink" title="2、根据物品的相似度和用户的历史行为给用户生成推荐列表"></a>2、根据物品的相似度和用户的历史行为给用户生成推荐列表</h3><p>此时推荐的物品列表为4，3，5。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> recomLists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//生成的推荐结果</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> preList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    recomLists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>preList<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、推荐列表不足5个的按点赞数补充。"><a href="#3、推荐列表不足5个的按点赞数补充。" class="headerlink" title="3、推荐列表不足5个的按点赞数补充。"></a>3、推荐列表不足5个的按点赞数补充。</h3><p>此时推荐的物品列表为4，3，5，2，0。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//推荐数量不满5个, 补足喜欢数最高的文章，考虑重复</span><span class="token keyword">if</span><span class="token punctuation">(</span>recomLists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    recomLists <span class="token operator">=</span> productdao<span class="token punctuation">.</span><span class="token function">findTopNProducts</span><span class="token punctuation">(</span>recomLists<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、测试样例"><a href="#三、测试样例" class="headerlink" title="三、测试样例"></a>三、测试样例</h2><p>在当前状态下，用户1001对物品6点赞，刷新后推荐列表更新为0，4，3，5，2。<br>简单过程（具体之后补）<br><img src="https://github.com/xuzichang/UserCF/blob/master/ImgForReadme/userCF.jpg" width="750"></p>]]></content>
      
      
      <categories>
          
          <category> 原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 个性化推荐 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
